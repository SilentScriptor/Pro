local function SafeGet(url)
    local success, response = pcall(function()
        return game:HttpGet(url)
    end)
    if success then
        return response
    else
        warn("‚ùå Failed to GET:", url, "| Error:", response)
        return nil
    end
end

local RayfieldSource = SafeGet("https://raw.githubusercontent.com/SiriusSoftwareLtd/Rayfield/main/source.lua")
if not RayfieldSource then
    error("Rayfield failed to load - check your connection or Rayfield's URL.")
end

local Rayfield = loadstring(RayfieldSource)()

local Window = Rayfield:CreateWindow({
    Name = "Pro Hub - v2",
    LoadingTitle = "Pro Hub",
    LoadingSubtitle = "by Mike",
    Theme = "Default",
    ConfigurationSaving = {
       Enabled = true,
       FileName = "ProHubConfig"
    },
})

local PlayerTab = Window:CreateTab("Player", 4483362458)

PlayerTab:CreateSlider({
    Name = "WalkSpeed",
    Range = {0, 300},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = 16,
    Flag = "WalkSpeedSlider",
    Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value
    end,
})

PlayerTab:CreateSlider({
    Name = "JumpPower",
    Range = {50, 500},
    Increment = 10,
    Suffix = "JumpPower",
    CurrentValue = 50,
    Flag = "JumpPowerSlider",
    Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = Value
    end,
})

-- Infinite Jump Toggle (Fixed)
PlayerTab:CreateToggle({
    Name = "Infinite Jump",
    CurrentValue = false,
    Flag = "InfiniteJumpToggle",
    Callback = function(Enabled)
        if Enabled then
            _G.InfiniteJump = game:GetService("UserInputService").JumpRequest:Connect(function()
                game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState("Jumping")
            end)
        else
            if _G.InfiniteJump then
                _G.InfiniteJump:Disconnect()
                _G.InfiniteJump = nil
            end
        end
    end,
})

-- NoClip Toggle (with Safety Check)
PlayerTab:CreateToggle({
    Name = "No Clip",
    CurrentValue = false,
    Flag = "NoClipToggle",
    Callback = function(Enabled)
        local RunService = game:GetService('RunService')

        local function noclip()
            if not game.Players.LocalPlayer.Character then return end
            for _, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                if v:IsA('BasePart') and v.CanCollide then
                    v.CanCollide = false
                end
            end
        end

        if Enabled then
            _G.NoClipConnection = RunService.Stepped:Connect(noclip)
        else
            if _G.NoClipConnection then
                _G.NoClipConnection:Disconnect()
                _G.NoClipConnection = nil
            end
        end
    end,
})

Rayfield:LoadConfiguration()
